{"version":3,"sources":["../../../../src/ajax/lib/core/settle.js"],"names":["settle","resolve","reject","response","validateStatus","config","status"],"mappings":"AAAA;;;;;kBAWwBA,M;;AATxB;;;;;;AAEA;;;;;;;AAOe,SAASA,MAAT,CAAgBC,OAAhB,EAAyBC,MAAzB,EAAiCC,QAAjC,EAA2C;AACxD,MAAIC,iBAAiBD,SAASE,MAAT,CAAgBD,cAArC;AACA;AACA,MAAI,CAACD,SAASG,MAAV,IAAoB,CAACF,cAArB,IAAuCA,eAAeD,SAASG,MAAxB,CAA3C,EAA4E;AAC1EL,YAAQE,QAAR;AACD,GAFD,MAEO;AACLD,WAAO,2BACL,qCAAqCC,SAASG,MADzC,EAELH,SAASE,MAFJ,EAGL,IAHK,EAILF,QAJK,CAAP;AAMD;AACF","file":"settle.js","sourcesContent":["'use strict';\n\nimport createError from './createError';\n\n/**\n * Resolve or reject a Promise based on response status.\n *\n * @param {Function} resolve A function that resolves the promise.\n * @param {Function} reject A function that rejects the promise.\n * @param {object} response The response.\n */\nexport default function settle(resolve, reject, response) {\n  var validateStatus = response.config.validateStatus;\n  // Note: status is not exposed by XDomainRequest\n  if (!response.status || !validateStatus || validateStatus(response.status)) {\n    resolve(response);\n  } else {\n    reject(createError(\n      'Request failed with status code ' + response.status,\n      response.config,\n      null,\n      response\n    ));\n  }\n};\n"]}