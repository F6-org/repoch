{"version":3,"sources":["../../../src/history/lib/useQueries.js"],"names":["defaultStringifyQuery","query","replace","defaultParseQueryString","parse","useQueries","createHistory","options","history","stringifyQuery","parseQueryString","decodeQuery","location","search","substring","encodeQuery","object","queryString","getCurrentLocation","listenBefore","hook","callback","listen","listener","push","createPath","createHref","createLocation","args","newLocation"],"mappings":"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","file":"useQueries.js","sourcesContent":["import { parse, stringify } from 'query-string'\nimport runTransitionHook from './runTransitionHook'\nimport { createQuery } from './LocationUtils'\nimport { parsePath } from './PathUtils'\n\nconst defaultStringifyQuery = (query) =>\n  stringify(query).replace(/%20/g, '+')\n\nconst defaultParseQueryString = parse\n\n/**\n * Returns a new createHistory function that may be used to create\n * history objects that know how to handle URL queries.\n */\nconst useQueries = (createHistory) =>\n  (options = {}) => {\n    const history = createHistory(options)\n    let { stringifyQuery, parseQueryString } = options\n\n    if (typeof stringifyQuery !== 'function')\n      stringifyQuery = defaultStringifyQuery\n\n    if (typeof parseQueryString !== 'function')\n      parseQueryString = defaultParseQueryString\n\n    const decodeQuery = (location) => {\n      if (!location)\n        return location\n\n      if (location.query == null)\n        location.query = parseQueryString(location.search.substring(1))\n\n      return location\n    }\n\n    const encodeQuery = (location, query) => {\n      if (query == null)\n        return location\n\n      const object = typeof location === 'string' ? parsePath(location) : location\n      const queryString = stringifyQuery(query)\n      const search = queryString ? `?${queryString}` : ''\n\n      return {\n        ...object,\n        search\n      }\n    }\n\n    // Override all read methods with query-aware versions.\n    const getCurrentLocation = () =>\n      decodeQuery(history.getCurrentLocation())\n\n    const listenBefore = (hook) =>\n      history.listenBefore(\n        (location, callback) =>\n          runTransitionHook(hook, decodeQuery(location), callback)\n      )\n\n    const listen = (listener) =>\n      history.listen(location => listener(decodeQuery(location)))\n\n    // Override all write methods with query-aware versions.\n    const push = (location) =>\n      history.push(encodeQuery(location, location.query))\n\n    const replace = (location) =>\n      history.replace(encodeQuery(location, location.query))\n\n    const createPath = (location) =>\n      history.createPath(encodeQuery(location, location.query))\n\n    const createHref = (location) =>\n      history.createHref(encodeQuery(location, location.query))\n\n    const createLocation = (location, ...args) => {\n      const newLocation =\n        history.createLocation(encodeQuery(location, location.query), ...args)\n\n      if (location.query)\n        newLocation.query = createQuery(location.query)\n\n      return decodeQuery(newLocation)\n    }\n\n    return {\n      ...history,\n      getCurrentLocation,\n      listenBefore,\n      listen,\n      push,\n      replace,\n      createPath,\n      createHref,\n      createLocation\n    }\n  }\n\nexport default useQueries\n"]}