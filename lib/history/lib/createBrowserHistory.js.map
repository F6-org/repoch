{"version":3,"sources":["../../../src/history/lib/createBrowserHistory.js"],"names":["BrowserProtocol","RefreshProtocol","createBrowserHistory","options","canUseDOM","useRefresh","forceRefresh","Protocol","getUserConfirmation","getCurrentLocation","pushLocation","replaceLocation","go","history","listenerCount","stopListener","startListener","listener","before","transitionTo","unlisten","listenBefore","listen"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;IAAYA,e;;AACZ;;IAAYC,e;;AACZ;;AACA;;;;;;;;AAEA;;;;;;;;;;AAUA,IAAMC,uBAAuB,SAAvBA,oBAAuB,GAAkB;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;;AAC7C,2BACEC,+BADF,EAEE,6BAFF;;AAKA,MAAMC,aAAaF,QAAQG,YAAR,IAAwB,CAAC,gCAA5C;AACA,MAAMC,WAAWF,aAAaJ,eAAb,GAA+BD,eAAhD;;AAP6C,MAU3CQ,mBAV2C,GAezCD,QAfyC,CAU3CC,mBAV2C;AAAA,MAW3CC,kBAX2C,GAezCF,QAfyC,CAW3CE,kBAX2C;AAAA,MAY3CC,YAZ2C,GAezCH,QAfyC,CAY3CG,YAZ2C;AAAA,MAa3CC,eAb2C,GAezCJ,QAfyC,CAa3CI,eAb2C;AAAA,MAc3CC,EAd2C,GAezCL,QAfyC,CAc3CK,EAd2C;;;AAiB7C,MAAMC,UAAU;AACdL,4CADc,IAEXL,OAFW;AAGdM,0CAHc;AAIdC,8BAJc;AAKdC,oCALc;AAMdC;AANc,KAAhB;;AASA,MAAIE,gBAAgB,CAApB;AAAA,MAAuBC,qBAAvB;;AAEA,MAAMC,gBAAgB,SAAhBA,aAAgB,CAACC,QAAD,EAAWC,MAAX,EAAsB;AAC1C,QAAI,EAAEJ,aAAF,KAAoB,CAAxB,EACEC,eAAef,gBAAgBgB,aAAhB,CACbH,QAAQM,YADK,CAAf;;AAIF,QAAMC,WAAWF,SACbL,QAAQQ,YAAR,CAAqBJ,QAArB,CADa,GAEbJ,QAAQS,MAAR,CAAeL,QAAf,CAFJ;;AAIA,WAAO,YAAM;AACXG;;AAEA,UAAI,EAAEN,aAAF,KAAoB,CAAxB,EACEC;AACH,KALD;AAMD,GAhBD;;AAkBA,MAAMM,eAAe,SAAfA,YAAe,CAACJ,QAAD;AAAA,WACnBD,cAAcC,QAAd,EAAwB,IAAxB,CADmB;AAAA,GAArB;;AAGA,MAAMK,SAAS,SAATA,MAAS,CAACL,QAAD;AAAA,WACbD,cAAcC,QAAd,EAAwB,KAAxB,CADa;AAAA,GAAf;;AAGA,sBACKJ,OADL;AAEEQ,8BAFF;AAGEC;AAHF;AAKD,CAzDD;;kBA2DepB,oB","file":"createBrowserHistory.js","sourcesContent":["import invariant from 'invariant'\nimport { canUseDOM } from './ExecutionEnvironment'\nimport * as BrowserProtocol from './BrowserProtocol'\nimport * as RefreshProtocol from './RefreshProtocol'\nimport { supportsHistory } from './DOMUtils'\nimport createHistory from './createHistory'\n\n/**\n * Creates and returns a history object that uses HTML5's history API\n * (pushState, replaceState, and the popstate event) to manage history.\n * This is the recommended method of managing history in browsers because\n * it provides the cleanest URLs.\n *\n * Note: In browsers that do not support the HTML5 history API full\n * page reloads will be used to preserve clean URLs. You can force this\n * behavior using { forceRefresh: true } in options.\n */\nconst createBrowserHistory = (options = {}) => {\n  invariant(\n    canUseDOM,\n    'Browser history needs a DOM'\n  )\n\n  const useRefresh = options.forceRefresh || !supportsHistory()\n  const Protocol = useRefresh ? RefreshProtocol : BrowserProtocol\n\n  const {\n    getUserConfirmation,\n    getCurrentLocation,\n    pushLocation,\n    replaceLocation,\n    go\n  } = Protocol\n\n  const history = createHistory({\n    getUserConfirmation, // User may override in options\n    ...options,\n    getCurrentLocation,\n    pushLocation,\n    replaceLocation,\n    go\n  })\n\n  let listenerCount = 0, stopListener\n\n  const startListener = (listener, before) => {\n    if (++listenerCount === 1)\n      stopListener = BrowserProtocol.startListener(\n        history.transitionTo\n      )\n\n    const unlisten = before\n      ? history.listenBefore(listener)\n      : history.listen(listener)\n\n    return () => {\n      unlisten()\n\n      if (--listenerCount === 0)\n        stopListener()\n    }\n  }\n\n  const listenBefore = (listener) =>\n    startListener(listener, true)\n\n  const listen = (listener) =>\n    startListener(listener, false)\n\n  return {\n    ...history,\n    listenBefore,\n    listen\n  }\n}\n\nexport default createBrowserHistory\n"]}