{"version":3,"sources":["../../../src/history/lib/PathUtils.js"],"names":["addQueryStringValueToPath","path","key","value","parsePath","pathname","search","hash","createPath","indexOf","stripQueryStringValueFromPath","replace","RegExp","match","prefix","suffix","getQueryStringValueFromPath","extractPath","string","substring","length","hashIndex","searchIndex","location","basename"],"mappings":"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","file":"PathUtils.js","sourcesContent":["import warning from 'warning'\n\nexport const addQueryStringValueToPath = (path, key, value) => {\n  const { pathname, search, hash } = parsePath(path)\n\n  return createPath({\n    pathname,\n    search: search + (search.indexOf('?') === -1 ? '?' : '&') + key + '=' + value,\n    hash\n  })\n}\n\nexport const stripQueryStringValueFromPath = (path, key) => {\n  const { pathname, search, hash } = parsePath(path)\n\n  return createPath({\n    pathname,\n    search: search.replace(\n      new RegExp(`([?&])${key}=[a-zA-Z0-9]+(&?)`),\n      (match, prefix, suffix) => (\n        prefix === '?' ? prefix : suffix\n      )\n    ),\n    hash\n  })\n}\n\nexport const getQueryStringValueFromPath = (path, key) => {\n  const { search } = parsePath(path)\n  const match = search.match(new RegExp(`[?&]${key}=([a-zA-Z0-9]+)`))\n  return match && match[1]\n}\n\nconst extractPath = (string) => {\n  const match = string.match(/^(https?:)?\\/\\/[^\\/]*/)\n  return match == null ? string : string.substring(match[0].length)\n}\n\nexport const parsePath = (path) => {\n  let pathname = extractPath(path)\n  let search = ''\n  let hash = ''\n\n  warning(\n    path === pathname,\n    'A path must be pathname + search + hash only, not a full URL like \"%s\"',\n    path\n  )\n\n  const hashIndex = pathname.indexOf('#')\n  if (hashIndex !== -1) {\n    hash = pathname.substring(hashIndex)\n    pathname = pathname.substring(0, hashIndex)\n  }\n\n  const searchIndex = pathname.indexOf('?')\n  if (searchIndex !== -1) {\n    search = pathname.substring(searchIndex)\n    pathname = pathname.substring(0, searchIndex)\n  }\n\n  if (pathname === '')\n    pathname = '/'\n\n  return {\n    pathname,\n    search,\n    hash\n  }\n}\n\nexport const createPath = (location) => {\n  if (location == null || typeof location === 'string')\n    return location\n\n  const { basename, pathname, search, hash } = location\n  let path = (basename || '') + pathname\n\n  if (search && search !== '?')\n    path += search\n\n  if (hash)\n    path += hash\n\n  return path\n}\n"]}