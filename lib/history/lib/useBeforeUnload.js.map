{"version":3,"sources":["../../../src/history/lib/useBeforeUnload.js"],"names":["startListener","getPromptMessage","handleBeforeUnload","event","message","window","returnValue","undefined","useBeforeUnload","createHistory","canUseDOM","options","history","listeners","stopListener","i","len","length","call","listenBeforeUnload","listener","push","filter","item"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;;;AAEA,IAAMA,gBAAgB,SAAhBA,aAAgB,CAACC,gBAAD,EAAsB;AAC1C,MAAMC,qBAAqB,SAArBA,kBAAqB,CAACC,KAAD,EAAW;AACpC,QAAMC,UAAUH,kBAAhB;;AAEA,QAAI,OAAOG,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,OAACD,SAASE,OAAOF,KAAjB,EAAwBG,WAAxB,GAAsCF,OAAtC;AACA,aAAOA,OAAP;AACD;;AAED,WAAOG,SAAP;AACD,GATD;;AAWA,kCAAiBF,MAAjB,EAAyB,cAAzB,EAAyCH,kBAAzC;;AAEA,SAAO;AAAA,WACL,mCAAoBG,MAApB,EAA4B,cAA5B,EAA4CH,kBAA5C,CADK;AAAA,GAAP;AAED,CAhBD;;AAkBA;;;;;AAKA,IAAMM,kBAAkB,SAAlBA,eAAkB,CAACC,aAAD,EAAmB;AACzC,2BACEC,+BADF,EAEE,gDAFF;;AAKA,SAAO,UAACC,OAAD,EAAa;AAClB,QAAMC,UAAUH,cAAcE,OAAd,CAAhB;;AAEA,QAAIE,YAAY,EAAhB;AACA,QAAIC,qBAAJ;;AAEA,QAAMb,mBAAmB,SAAnBA,gBAAmB,GAAM;AAC7B,UAAIG,gBAAJ;AACA,WAAK,IAAIW,IAAI,CAAR,EAAWC,MAAMH,UAAUI,MAAhC,EAAwCb,WAAW,IAAX,IAAmBW,IAAIC,GAA/D,EAAoE,EAAED,CAAtE;AACEX,kBAAUS,UAAUE,CAAV,EAAaG,IAAb,EAAV;AADF,OAGA,OAAOd,OAAP;AACD,KAND;;AAQA,QAAMe,qBAAqB,SAArBA,kBAAqB,CAACC,QAAD,EAAc;AACvC,UAAIP,UAAUQ,IAAV,CAAeD,QAAf,MAA6B,CAAjC,EACEN,eAAed,cAAcC,gBAAd,CAAf;;AAEF,aAAO,YAAM;AACXY,oBAAYA,UAAUS,MAAV,CAAiB;AAAA,iBAAQC,SAASH,QAAjB;AAAA,SAAjB,CAAZ;;AAEA,YAAIP,UAAUI,MAAV,KAAqB,CAArB,IAA0BH,YAA9B,EAA4C;AAC1CA;AACAA,yBAAe,IAAf;AACD;AACF,OAPD;AAQD,KAZD;;AAcA,wBACKF,OADL;AAEEO;AAFF;AAID,GAhCD;AAiCD,CAvCD;;kBAyCeX,e","file":"useBeforeUnload.js","sourcesContent":["import invariant from 'invariant'\nimport { addEventListener, removeEventListener } from './DOMUtils'\nimport { canUseDOM } from './ExecutionEnvironment'\n\nconst startListener = (getPromptMessage) => {\n  const handleBeforeUnload = (event) => {\n    const message = getPromptMessage()\n\n    if (typeof message === 'string') {\n      (event || window.event).returnValue = message\n      return message\n    }\n\n    return undefined\n  }\n\n  addEventListener(window, 'beforeunload', handleBeforeUnload)\n\n  return () =>\n    removeEventListener(window, 'beforeunload', handleBeforeUnload)\n}\n\n/**\n * Returns a new createHistory function that can be used to create\n * history objects that know how to use the beforeunload event in web\n * browsers to cancel navigation.\n */\nconst useBeforeUnload = (createHistory) => {\n  invariant(\n    canUseDOM,\n    'useBeforeUnload only works in DOM environments'\n  )\n\n  return (options) => {\n    const history = createHistory(options)\n\n    let listeners = []\n    let stopListener\n\n    const getPromptMessage = () => {\n      let message\n      for (let i = 0, len = listeners.length; message == null && i < len; ++i)\n        message = listeners[i].call()\n\n      return message\n    }\n\n    const listenBeforeUnload = (listener) => {\n      if (listeners.push(listener) === 1)\n        stopListener = startListener(getPromptMessage)\n\n      return () => {\n        listeners = listeners.filter(item => item !== listener)\n\n        if (listeners.length === 0 && stopListener) {\n          stopListener()\n          stopListener = null\n        }\n      }\n    }\n\n    return {\n      ...history,\n      listenBeforeUnload\n    }\n  }\n}\n\nexport default useBeforeUnload\n"]}