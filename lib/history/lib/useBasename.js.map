{"version":3,"sources":["../../../src/history/lib/useBasename.js"],"names":["useBasename","createHistory","options","history","basename","addBasename","location","pathname","indexOf","substring","length","prependBasename","object","pname","normalizedBasename","slice","normalizedPathname","charAt","getCurrentLocation","listenBefore","hook","callback","listen","listener","push","replace","createPath","createHref","createLocation","args"],"mappings":"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","file":"useBasename.js","sourcesContent":["import runTransitionHook from './runTransitionHook'\nimport { parsePath } from './PathUtils'\n\nconst useBasename = (createHistory) =>\n  (options = {}) => {\n    const history = createHistory(options)\n    const { basename } = options\n\n    const addBasename = (location) => {\n      if (!location)\n        return location\n\n      if (basename && location.basename == null) {\n        if (location.pathname.indexOf(basename) === 0) {\n          location.pathname = location.pathname.substring(basename.length)\n          location.basename = basename\n\n          if (location.pathname === '')\n            location.pathname = '/'\n        } else {\n          location.basename = ''\n        }\n      }\n\n      return location\n    }\n\n    const prependBasename = (location) => {\n      if (!basename)\n        return location\n\n      const object = typeof location === 'string' ? parsePath(location) : location\n      const pname = object.pathname\n      const normalizedBasename = basename.slice(-1) === '/' ? basename : `${basename}/`\n      const normalizedPathname = pname.charAt(0) === '/' ? pname.slice(1) : pname\n      const pathname = normalizedBasename + normalizedPathname\n\n      return {\n        ...object,\n        pathname\n      }\n    }\n\n    // Override all read methods with basename-aware versions.\n    const getCurrentLocation = () =>\n      addBasename(history.getCurrentLocation())\n\n    const listenBefore = (hook) =>\n      history.listenBefore(\n        (location, callback) =>\n          runTransitionHook(hook, addBasename(location), callback)\n      )\n\n    const listen = (listener) =>\n      history.listen(location => listener(addBasename(location)))\n\n    // Override all write methods with basename-aware versions.\n    const push = (location) =>\n      history.push(prependBasename(location))\n\n    const replace = (location) =>\n      history.replace(prependBasename(location))\n\n    const createPath = (location) =>\n      history.createPath(prependBasename(location))\n\n    const createHref = (location) =>\n      history.createHref(prependBasename(location))\n\n    const createLocation = (location, ...args) =>\n      addBasename(history.createLocation(prependBasename(location), ...args))\n\n    return {\n      ...history,\n      getCurrentLocation,\n      listenBefore,\n      listen,\n      push,\n      replace,\n      createPath,\n      createHref,\n      createLocation\n    }\n  }\n\nexport default useBasename\n"]}