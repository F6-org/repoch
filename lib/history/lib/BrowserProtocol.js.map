{"version":3,"sources":["../../../src/history/lib/BrowserProtocol.js"],"names":["PopStateEvent","HashChangeEvent","needsHashchangeListener","canUseDOM","_createLocation","historyState","key","pathname","window","location","search","hash","state","undefined","getCurrentLocation","history","error","getUserConfirmation","message","callback","confirm","startListener","listener","handlePopState","event","handleUnpoppedHashChange","updateLocation","updateState","pushLocation","path","pushState","replaceLocation","replaceState","go","n"],"mappings":"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","file":"BrowserProtocol.js","sourcesContent":["import { createLocation } from './LocationUtils'\nimport {\n  addEventListener,\n  removeEventListener,\n  supportsPopstateOnHashchange\n} from './DOMUtils'\nimport { saveState, readState } from './DOMStateStorage'\nimport { createPath } from './PathUtils'\n\nimport { canUseDOM } from './ExecutionEnvironment'\n\nconst PopStateEvent = 'popstate'\nconst HashChangeEvent = 'hashchange'\n\nconst needsHashchangeListener = canUseDOM && !supportsPopstateOnHashchange()\n\nconst _createLocation = (historyState) => {\n  const key = historyState && historyState.key\n\n  return createLocation({\n    pathname: window.location.pathname,\n    search: window.location.search,\n    hash: window.location.hash,\n    state: (key ? readState(key) : undefined)\n  }, undefined, key)\n}\n\nexport const getCurrentLocation = () => {\n  let historyState\n  try {\n    historyState = window.history.state || {}\n  } catch (error) {\n    // IE 11 sometimes throws when accessing window.history.state\n    // See https://github.com/ReactTraining/history/pull/289\n    historyState = {}\n  }\n\n  return _createLocation(historyState)\n}\n\nexport const getUserConfirmation = (message, callback) =>\n  callback(window.confirm(message)) // eslint-disable-line no-alert\n\nexport const startListener = (listener) => {\n  const handlePopState = (event) => {\n    if (event.state !== undefined) // Ignore extraneous popstate events in WebKit\n      listener(_createLocation(event.state))\n  }\n\n  addEventListener(window, PopStateEvent, handlePopState)\n\n  const handleUnpoppedHashChange = () =>\n    listener(getCurrentLocation())\n\n  if (needsHashchangeListener) {\n    addEventListener(window, HashChangeEvent, handleUnpoppedHashChange)\n  }\n\n  return () => {\n    removeEventListener(window, PopStateEvent, handlePopState)\n\n    if (needsHashchangeListener) {\n      removeEventListener(window, HashChangeEvent, handleUnpoppedHashChange)\n    }\n  }\n}\n\nconst updateLocation = (location, updateState) => {\n  const { state, key } = location\n\n  if (state !== undefined)\n    saveState(key, state)\n\n  updateState({ key }, createPath(location))\n}\n\nexport const pushLocation = (location) =>\n  updateLocation(location, (state, path) =>\n    window.history.pushState(state, null, path)\n  )\n\nexport const replaceLocation = (location) =>\n  updateLocation(location, (state, path) =>\n    window.history.replaceState(state, null, path)\n  )\n\nexport const go = (n) => {\n  if (n)\n    window.history.go(n)\n}\n"]}