{"version":3,"sources":["../../src/transition/index.js"],"names":["transitionEndEvent","transitionInfo","end","UNMOUNTED","EXITED","ENTERING","ENTERED","EXITING","Transition","props","context","initialStatus","in","transitionAppear","unmountOnExit","state","status","nextCallback","performEnter","nextProps","setState","performExit","cancelNextCallback","node","ReactDOM","findDOMNode","onEnter","safeSetState","onEntering","onTransitionEnd","onEntered","onExit","onExiting","onExited","cancel","nextState","callback","setNextCallback","active","event","handler","setTimeout","timeout","children","className","childProps","Object","keys","propTypes","forEach","key","transitionClassName","exitedClassName","enteringClassName","enteredClassName","exitingClassName","child","React","Children","only","cloneElement","Component","PropTypes","bool","number","string","func","noop","displayName","defaultProps"],"mappings":"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","file":"index.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport classnames from './classnames';\n\nimport transitionInfo from 'dom-helpers/transition/properties';\nimport addEventListener from 'dom-helpers/events/on';\n\nlet transitionEndEvent = transitionInfo.end;\n\nexport const UNMOUNTED = 0;\nexport const EXITED = 1;\nexport const ENTERING = 2;\nexport const ENTERED = 3;\nexport const EXITING = 4;\n\nexport default class Transition extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n\n        let initialStatus;\n        if (props.in) {\n            // Start enter transition in componentDidMount.\n            initialStatus = props.transitionAppear ? EXITED : ENTERED;\n        } else {\n            initialStatus = props.unmountOnExit ? UNMOUNTED : EXITED;\n        }\n        this.state = { status: initialStatus };\n\n        this.nextCallback = null;\n    }\n\n    componentDidMount() {\n        if (this.props.transitionAppear && this.props.in) {\n            this.performEnter(this.props);\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        const status = this.state.status;\n        if (nextProps.in) {\n            if (status === EXITING) {\n                this.performEnter(nextProps);\n            } else if (this.props.unmountOnExit) {\n                if (status === UNMOUNTED) {\n                    // Start enter transition in componentDidUpdate.\n                    this.setState({ status: EXITED });\n                }\n            } else if (status === EXITED) {\n                this.performEnter(nextProps);\n            }\n\n            // Otherwise we're already entering or entered.\n        } else {\n            if (status === ENTERING || status === ENTERED) {\n                this.performExit(nextProps);\n            }\n\n            // Otherwise we're already exited or exiting.\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.props.unmountOnExit && this.state.status === EXITED) {\n            // EXITED is always a transitional state to either ENTERING or UNMOUNTED\n            // when using unmountOnExit.\n            if (this.props.in) {\n                this.performEnter(this.props);\n            } else {\n                this.setState({ status: UNMOUNTED });\n            }\n        }\n    }\n\n    componentWillUnmount() {\n        this.cancelNextCallback();\n    }\n\n    performEnter(props) {\n        this.cancelNextCallback();\n        const node = ReactDOM.findDOMNode(this);\n\n        // Not this.props, because we might be about to receive new props.\n        props.onEnter(node);\n\n        this.safeSetState({ status: ENTERING }, () => {\n            this.props.onEntering(node);\n\n            this.onTransitionEnd(node, () => {\n                this.safeSetState({ status: ENTERED }, () => {\n                    this.props.onEntered(node);\n                });\n            });\n        });\n    }\n\n    performExit(props) {\n        this.cancelNextCallback();\n        const node = ReactDOM.findDOMNode(this);\n\n        // Not this.props, because we might be about to receive new props.\n        props.onExit(node);\n\n        this.safeSetState({ status: EXITING }, () => {\n            this.props.onExiting(node);\n\n            this.onTransitionEnd(node, () => {\n                this.safeSetState({ status: EXITED }, () => {\n                    this.props.onExited(node);\n                });\n            });\n        });\n    }\n\n    cancelNextCallback() {\n        if (this.nextCallback !== null) {\n            this.nextCallback.cancel();\n            this.nextCallback = null;\n        }\n    }\n\n    safeSetState(nextState, callback) {\n        // This shouldn't be necessary, but there are weird race conditions with\n        // setState callbacks and unmounting in testing, so always make sure that\n        // we can cancel any pending setState callbacks after we unmount.\n        this.setState(nextState, this.setNextCallback(callback));\n    }\n\n    setNextCallback(callback) {\n        let active = true;\n\n        this.nextCallback = (event) => {\n            if (active) {\n                active = false;\n                this.nextCallback = null;\n\n                callback(event);\n            }\n        };\n\n        this.nextCallback.cancel = () => {\n            active = false;\n        };\n\n        return this.nextCallback;\n    }\n\n    onTransitionEnd(node, handler) {\n        this.setNextCallback(handler);\n\n        if (node) {\n            addEventListener(node, transitionEndEvent, this.nextCallback);\n            setTimeout(this.nextCallback, this.props.timeout);\n        } else {\n            setTimeout(this.nextCallback, 0);\n        }\n    }\n\n    render() {\n        const status = this.state.status;\n        if (status === UNMOUNTED) {\n            return null;\n        }\n\n        const { children, className, ...childProps } = this.props;\n        Object.keys(Transition.propTypes).forEach(key => delete childProps[key]);\n\n        let transitionClassName;\n        if (status === EXITED) {\n            transitionClassName = this.props.exitedClassName;\n        } else if (status === ENTERING) {\n            transitionClassName = this.props.enteringClassName;\n        } else if (status === ENTERED) {\n            transitionClassName = this.props.enteredClassName;\n        } else if (status === EXITING) {\n            transitionClassName = this.props.exitingClassName;\n        }\n\n        let child = React.Children.only(children);\n        // child = (\n        //     <div>\n        //         { child }\n        //     </div>\n        // );\n\n        return React.cloneElement(\n            child,\n            {\n                ...childProps,\n                className: classnames(\n                    child.props.className,\n                    className,\n                    transitionClassName\n                )\n            }\n        );\n    }\n}\n\nTransition.propTypes = {\n    /**\n     * 展示 or 隐藏组件\n     */\n    in: PropTypes.bool,\n\n    /**\n     * 是否在不展示组件后销毁组件\n     */\n    unmountOnExit: PropTypes.bool,\n\n    /**\n     * 组件初次渲染时，是否执行动画\n     */\n    transitionAppear: PropTypes.bool,\n\n    /**\n     * 动画的执行延迟，用来确保节点可执行，初始值为5秒，适当设置\n     */\n    timeout: PropTypes.number,\n\n    /**\n     * 组件退出后的class\n     */\n    exitedClassName: PropTypes.string,\n    /**\n     * 组件退出过程中的class\n     */\n    exitingClassName: PropTypes.string,\n    /**\n     * 组件渲染后的class\n     */\n    enteredClassName: PropTypes.string,\n    /**\n     * 组件渲染过程中的class\n     */\n    enteringClassName: PropTypes.string,\n\n    /**\n     * 组件设置渲染中class之前的回调\n     */\n    onEnter: PropTypes.func,\n    /**\n     * 组件设置渲染中class之后的回调\n     */\n    onEntering: PropTypes.func,\n    /**\n     * 组件设置渲染后的class之后的回调\n     */\n    onEntered: PropTypes.func,\n    /**\n     * 组件设置退出过程中的class之前的回调\n     */\n    onExit: PropTypes.func,\n    /**\n     * 组件设置退出过程中的class之后的回调\n     */\n    onExiting: PropTypes.func,\n    /**\n     * 组件设置退出后的class之后的回调\n     */\n    onExited: PropTypes.func\n};\n\nfunction noop() {}\n\nTransition.displayName = 'Transition';\n\nTransition.defaultProps = {\n    in: false,\n    unmountOnExit: false,\n    transitionAppear: true,\n\n    timeout: 5000,\n\n    onEnter: noop,\n    onEntering: noop,\n    onEntered: noop,\n\n    onExit: noop,\n    onExiting: noop,\n    onExited: noop\n};"]}