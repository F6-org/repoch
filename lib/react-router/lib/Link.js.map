{"version":3,"sources":["../../../src/react-router/lib/Link.js"],"names":["isLeftClickEvent","event","button","isModifiedEvent","metaKey","altKey","ctrlKey","shiftKey","isEmptyObject","object","p","Object","prototype","hasOwnProperty","call","resolveToLocation","to","router","location","Link","displayName","mixins","contextTypes","routerShape","propTypes","string","func","activeStyle","activeClassName","onlyActiveOnIndex","bool","isRequired","onClick","target","getDefaultProps","style","handleClick","props","defaultPrevented","context","preventDefault","push","render","toLocation","href","createHref","isActive","className"],"mappings":"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","file":"Link.js","sourcesContent":["import React from 'react'\nimport createReactClass from 'create-react-class'\nimport { bool, object, string, func, oneOfType } from 'prop-types'\nimport invariant from 'invariant'\nimport { routerShape } from './PropTypes'\nimport { ContextSubscriber } from './ContextUtils'\n\nfunction isLeftClickEvent(event) {\n  return event.button === 0\n}\n\nfunction isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey)\n}\n\n// TODO: De-duplicate against hasAnyProperties in createTransitionManager.\nfunction isEmptyObject(object) {\n  for (const p in object)\n    if (Object.prototype.hasOwnProperty.call(object, p))\n      return false\n\n  return true\n}\n\nfunction resolveToLocation(to, router) {\n  return typeof to === 'function' ? to(router.location) : to\n}\n\n/**\n * A <Link> is used to create an <a> element that links to a route.\n * When that route is active, the link gets the value of its\n * activeClassName prop.\n *\n * For example, assuming you have the following route:\n *\n *   <Route path=\"/posts/:postID\" component={Post} />\n *\n * You could use the following component to link to that route:\n *\n *   <Link to={`/posts/${post.id}`} />\n */\nconst Link = createReactClass({\n  displayName: 'Link',\n\n  mixins: [ ContextSubscriber('router') ],\n\n  contextTypes: {\n    router: routerShape\n  },\n\n  propTypes: {\n    to: oneOfType([ string, object, func ]),\n    activeStyle: object,\n    activeClassName: string,\n    onlyActiveOnIndex: bool.isRequired,\n    onClick: func,\n    target: string\n  },\n\n  getDefaultProps() {\n    return {\n      onlyActiveOnIndex: false,\n      style: {}\n    }\n  },\n\n  handleClick(event) {\n    if (this.props.onClick)\n      this.props.onClick(event)\n\n    if (event.defaultPrevented)\n      return\n\n    const { router } = this.context\n    invariant(\n      router,\n      '<Link>s rendered outside of a router context cannot navigate.'\n    )\n\n    if (isModifiedEvent(event) || !isLeftClickEvent(event))\n      return\n\n    // If target prop is set (e.g. to \"_blank\"), let browser handle link.\n    /* istanbul ignore if: untestable with Karma */\n    if (this.props.target)\n      return\n\n    event.preventDefault()\n\n    router.push(resolveToLocation(this.props.to, router))\n  },\n\n  render() {\n    const { to, activeClassName, activeStyle, onlyActiveOnIndex, ...props } = this.props\n\n    // Ignore if rendered outside the context of router to simplify unit testing.\n    const { router } = this.context\n\n    if (router) {\n      // If user does not specify a `to` prop, return an empty anchor tag.\n      if (!to) { return <a {...props} /> }\n\n      const toLocation = resolveToLocation(to, router)\n      props.href = router.createHref(toLocation)\n\n      if (activeClassName || (activeStyle != null && !isEmptyObject(activeStyle))) {\n        if (router.isActive(toLocation, onlyActiveOnIndex)) {\n          if (activeClassName) {\n            if (props.className) {\n              props.className += ` ${activeClassName}`\n            } else {\n              props.className = activeClassName\n            }\n          }\n\n          if (activeStyle)\n            props.style = { ...props.style, ...activeStyle }\n        }\n      }\n    }\n\n    return <a {...props} onClick={this.handleClick} />\n  }\n\n})\n\nexport default Link\n"]}