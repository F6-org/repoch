{"version":3,"sources":["../../../src/react-router/lib/Redirect.js"],"names":["Redirect","displayName","statics","createRouteFromReactElement","element","route","from","path","onEnter","nextState","replace","location","params","pathname","to","charAt","routeIndex","routes","indexOf","parentPattern","getRoutePattern","pattern","query","state","i","propTypes","string","isRequired","object","falsy","children","render"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;AACA;;AACA;;;;AAEA;;;;;;;AAOA;AACA,IAAMA,WAAW,gCAAiB;AAChCC,eAAa,UADmB;;AAGhCC,WAAS;AAEPC,+BAFO,uCAEqBC,OAFrB,EAE8B;AACnC,UAAMC,QAAQ,6CAA4BD,OAA5B,CAAd;;AAEA,UAAIC,MAAMC,IAAV,EACED,MAAME,IAAN,GAAaF,MAAMC,IAAnB;;AAEFD,YAAMG,OAAN,GAAgB,UAAUC,SAAV,EAAqBC,OAArB,EAA8B;AAAA,YACpCC,QADoC,GACfF,SADe,CACpCE,QADoC;AAAA,YAC1BC,MAD0B,GACfH,SADe,CAC1BG,MAD0B;;;AAG5C,YAAIC,iBAAJ;AACA,YAAIR,MAAMS,EAAN,CAASC,MAAT,CAAgB,CAAhB,MAAuB,GAA3B,EAAgC;AAC9BF,qBAAW,iCAAcR,MAAMS,EAApB,EAAwBF,MAAxB,CAAX;AACD,SAFD,MAEO,IAAI,CAACP,MAAMS,EAAX,EAAe;AACpBD,qBAAWF,SAASE,QAApB;AACD,SAFM,MAEA;AACL,cAAIG,aAAaP,UAAUQ,MAAV,CAAiBC,OAAjB,CAAyBb,KAAzB,CAAjB;AACA,cAAIc,gBAAgBnB,SAASoB,eAAT,CAAyBX,UAAUQ,MAAnC,EAA2CD,aAAa,CAAxD,CAApB;AACA,cAAIK,UAAUF,cAAcT,OAAd,CAAsB,MAAtB,EAA8B,GAA9B,IAAqCL,MAAMS,EAAzD;AACAD,qBAAW,iCAAcQ,OAAd,EAAuBT,MAAvB,CAAX;AACD;;AAEDF,gBAAQ;AACNG,4BADM;AAENS,iBAAOjB,MAAMiB,KAAN,IAAeX,SAASW,KAFzB;AAGNC,iBAAOlB,MAAMkB,KAAN,IAAeZ,SAASY;AAHzB,SAAR;AAKD,OApBD;;AAsBA,aAAOlB,KAAP;AACD,KA/BM;AAiCPe,mBAjCO,2BAiCSH,MAjCT,EAiCiBD,UAjCjB,EAiC6B;AAClC,UAAIG,gBAAgB,EAApB;;AAEA,WAAK,IAAIK,IAAIR,UAAb,EAAyBQ,KAAK,CAA9B,EAAiCA,GAAjC,EAAsC;AACpC,YAAMnB,QAAQY,OAAOO,CAAP,CAAd;AACA,YAAMH,UAAUhB,MAAME,IAAN,IAAc,EAA9B;;AAEAY,wBAAgBE,QAAQX,OAAR,CAAgB,MAAhB,EAAwB,GAAxB,IAA+BS,aAA/C;;AAEA,YAAIE,QAAQH,OAAR,CAAgB,GAAhB,MAAyB,CAA7B,EACE;AACH;;AAED,aAAO,MAAMC,aAAb;AACD;AA/CM,GAHuB;;AAsDhCM,aAAW;AACTlB,UAAMmB,iBADG;AAETpB,UAAMoB,iBAFG,EAEK;AACdZ,QAAIY,kBAAOC,UAHF;AAITL,WAAOM,iBAJE;AAKTL,WAAOK,iBALE;AAMTpB,aAASqB,wBANA;AAOTC,cAAUD;AAPD,GAtDqB;;AAgEhC;AACAE,QAjEgC,oBAiEvB;AACP,6BACE,KADF,EAEE,kFAFF;AAID;AAtE+B,CAAjB,CAAjB;;kBA0Ee/B,Q","file":"Redirect.js","sourcesContent":["import createReactClass from 'create-react-class'\nimport { string, object } from 'prop-types'\nimport invariant from 'invariant'\nimport { createRouteFromReactElement } from './RouteUtils'\nimport { formatPattern } from './PatternUtils'\nimport { falsy } from './InternalPropTypes'\n\n/**\n * A <Redirect> is used to declare another URL path a client should\n * be sent to when they request a given URL.\n *\n * Redirects are placed alongside routes in the route configuration\n * and are traversed in the same manner.\n */\n/* eslint-disable react/require-render-return */\nconst Redirect = createReactClass({\n  displayName: 'Redirect',\n\n  statics: {\n\n    createRouteFromReactElement(element) {\n      const route = createRouteFromReactElement(element)\n\n      if (route.from)\n        route.path = route.from\n\n      route.onEnter = function (nextState, replace) {\n        const { location, params } = nextState\n\n        let pathname\n        if (route.to.charAt(0) === '/') {\n          pathname = formatPattern(route.to, params)\n        } else if (!route.to) {\n          pathname = location.pathname\n        } else {\n          let routeIndex = nextState.routes.indexOf(route)\n          let parentPattern = Redirect.getRoutePattern(nextState.routes, routeIndex - 1)\n          let pattern = parentPattern.replace(/\\/*$/, '/') + route.to\n          pathname = formatPattern(pattern, params)\n        }\n\n        replace({\n          pathname,\n          query: route.query || location.query,\n          state: route.state || location.state\n        })\n      }\n\n      return route\n    },\n\n    getRoutePattern(routes, routeIndex) {\n      let parentPattern = ''\n\n      for (let i = routeIndex; i >= 0; i--) {\n        const route = routes[i]\n        const pattern = route.path || ''\n\n        parentPattern = pattern.replace(/\\/*$/, '/') + parentPattern\n\n        if (pattern.indexOf('/') === 0)\n          break\n      }\n\n      return '/' + parentPattern\n    }\n\n  },\n\n  propTypes: {\n    path: string,\n    from: string, // Alias for path\n    to: string.isRequired,\n    query: object,\n    state: object,\n    onEnter: falsy,\n    children: falsy\n  },\n\n  /* istanbul ignore next: sanity check */\n  render() {\n    invariant(\n      false,\n      '<Redirect> elements are for router configuration only and should not be rendered'\n    )\n  }\n\n})\n\nexport default Redirect\n"]}