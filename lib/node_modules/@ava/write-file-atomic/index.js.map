{"version":3,"sources":["../../../../src/node_modules/@ava/write-file-atomic/index.js"],"names":["module","exports","writeFile","sync","writeFileSync","_getTmpname","getTmpname","fs","require","chain","MurmurHash3","invocations","filename","__filename","hash","String","process","pid","result","data","options","callback","Function","realpath","_","realname","_writeFile","tmpfile","mode","chown","thenWriteFile","stat","err","stats","getuid","uid","gid","writeFileAsync","encoding","chmod","rename","unlink","file","cb","open","fd","Buffer","isBuffer","write","length","syncAndClose","fsync","close","realpathSync","ex","statSync","openSync","writeSync","fsyncSync","closeSync","chownSync","chmodSync","renameSync","unlinkSync","e"],"mappings":"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","file":"index.js","sourcesContent":["'use strict'\nmodule.exports = writeFile\nmodule.exports.sync = writeFileSync\nmodule.exports._getTmpname = getTmpname // for testing\n\nvar fs = require('graceful-fs')\nvar chain = require('slide').chain\nvar MurmurHash3 = require('imurmurhash')\n\nvar invocations = 0\nfunction getTmpname (filename) {\n  return filename + '.' +\n    MurmurHash3(__filename)\n      .hash(String(process.pid))\n      .hash(String(++invocations))\n      .result()\n}\n\nfunction writeFile (filename, data, options, callback) {\n  if (options instanceof Function) {\n    callback = options\n    options = null\n  }\n  if (!options) options = {}\n  fs.realpath(filename, function (_, realname) {\n    _writeFile(realname || filename, data, options, callback)\n  })\n}\nfunction _writeFile (filename, data, options, callback) {\n  var tmpfile = getTmpname(filename)\n\n  if (options.mode && options.chown) {\n    return thenWriteFile()\n  } else {\n    // Either mode or chown is not explicitly set\n    // Default behavior is to copy it from original file\n    return fs.stat(filename, function (err, stats) {\n      if (err || !stats) return thenWriteFile()\n\n      options = Object.assign({}, options)\n      if (!options.mode) {\n        options.mode = stats.mode\n      }\n      if (!options.chown && process.getuid) {\n        options.chown = { uid: stats.uid, gid: stats.gid }\n      }\n      return thenWriteFile()\n    })\n  }\n\n  function thenWriteFile () {\n    chain([\n      [writeFileAsync, tmpfile, data, options.mode, options.encoding || 'utf8'],\n      options.chown && [fs, fs.chown, tmpfile, options.chown.uid, options.chown.gid],\n      options.mode && [fs, fs.chmod, tmpfile, options.mode],\n      [fs, fs.rename, tmpfile, filename]\n    ], function (err) {\n      err ? fs.unlink(tmpfile, function () { callback(err, tmpfile) })\n        : callback(null, tmpfile)\n    })\n  }\n\n  // doing this instead of `fs.writeFile` in order to get the ability to\n  // call `fsync`.\n  function writeFileAsync (file, data, mode, encoding, cb) {\n    fs.open(file, 'w', options.mode, function (err, fd) {\n      if (err) return cb(err)\n      if (Buffer.isBuffer(data)) {\n        return fs.write(fd, data, 0, data.length, 0, syncAndClose)\n      } else if (data != null) {\n        return fs.write(fd, String(data), 0, String(encoding), syncAndClose)\n      } else {\n        return syncAndClose()\n      }\n      function syncAndClose (err) {\n        if (err) return cb(err)\n        if (options.fsync !== false) {\n          fs.fsync(fd, function (err) {\n            if (err) return cb(err)\n            fs.close(fd, cb)\n          })\n        } else {\n          fs.close(fd, cb)\n        }\n      }\n    })\n  }\n}\n\nfunction writeFileSync (filename, data, options) {\n  if (!options) options = {}\n  try {\n    filename = fs.realpathSync(filename)\n  } catch (ex) {\n    // it's ok, it'll happen on a not yet existing file\n  }\n  var tmpfile = getTmpname(filename)\n\n  try {\n    if (!options.mode || !options.chown) {\n      // Either mode or chown is not explicitly set\n      // Default behavior is to copy it from original file\n      try {\n        var stats = fs.statSync(filename)\n        options = Object.assign({}, options)\n        if (!options.mode) {\n          options.mode = stats.mode\n        }\n        if (!options.chown && process.getuid) {\n          options.chown = { uid: stats.uid, gid: stats.gid }\n        }\n      } catch (ex) {\n        // ignore stat errors\n      }\n    }\n\n    var fd = fs.openSync(tmpfile, 'w', options.mode)\n    if (Buffer.isBuffer(data)) {\n      fs.writeSync(fd, data, 0, data.length, 0)\n    } else if (data != null) {\n      fs.writeSync(fd, String(data), 0, String(options.encoding || 'utf8'))\n    }\n    if (options.fsync !== false) {\n      fs.fsyncSync(fd)\n    }\n    fs.closeSync(fd)\n    if (options.chown) fs.chownSync(tmpfile, options.chown.uid, options.chown.gid)\n    if (options.mode) fs.chmodSync(tmpfile, options.mode)\n    fs.renameSync(tmpfile, filename)\n    return tmpfile\n  } catch (err) {\n    try { fs.unlinkSync(tmpfile) } catch (e) {}\n    throw err\n  }\n}\n"]}