{"version":3,"sources":["../../../../src/node_modules/@concordance/react/index.js"],"names":["pkg","require","elementFactory","testJsonFactory","exports","name","apiVersion","minimalConcordanceVersion","serializerVersion","theme","react","functionType","openTag","start","end","selfClose","selfCloseVoid","closeTag","open","close","tagName","attribute","separator","value","openBracket","closeBracket","string","line","escapeQuote","child","multiline","ELEMENT","Symbol","for","TEST_JSON","register","api","reactTags","Set","element","testJson","addDescriptor","tag","deserialize","add","$$typeof","describe"],"mappings":"AAAA;;AAEA,IAAMA,MAAMC,QAAQ,gBAAR,CAAZ;AACA,IAAMC,iBAAiBD,QAAQ,sBAAR,CAAvB;AACA,IAAME,kBAAkBF,QAAQ,uBAAR,CAAxB;;AAEA;AACAG,QAAQC,IAAR,GAAeL,IAAIK,IAAnB;;AAEA;AACAD,QAAQE,UAAR,GAAqB,CAArB;;AAEA;AACA;AACA;AACAF,QAAQG,yBAAR,GAAoC,OAApC;;AAEA;AACAH,QAAQI,iBAAR,GAA4B,CAA5B;;AAEAJ,QAAQK,KAAR,GAAgB;AACdC,SAAO;AACLC,kBAAc,QADT;AAELC,aAAS;AACPC,aAAO,GADA;AAEPC,WAAK,GAFE;AAGPC,iBAAW,GAHJ;AAIPC,qBAAe;AAJR,KAFJ;AAQLC,cAAU;AACRC,YAAM,IADE;AAERC,aAAO;AAFC,KARL;AAYLC,aAAS,EAACF,MAAM,EAAP,EAAWC,OAAO,EAAlB,EAZJ;AAaLE,eAAW;AACTC,iBAAW,GADF;AAETC,aAAO;AACLC,qBAAa,GADR;AAELC,sBAAc,GAFT;AAGLC,gBAAQ;AACNC,gBAAM,EAACT,MAAM,GAAP,EAAYC,OAAO,GAAnB,EAAwBS,aAAa,GAArC;AADA;AAHH;AAFE,KAbN;AAuBLC,WAAO;AACLL,mBAAa,GADR;AAELC,oBAAc,GAFT;AAGLC,cAAQ;AACNC,cAAM,EAACT,MAAM,EAAP,EAAWC,OAAO,EAAlB,EAAsBS,aAAa,EAAnC,EADA;AAENE,mBAAW,EAACjB,OAAO,EAAR,EAAYC,KAAK,EAAjB,EAAqBc,aAAa,EAAlC;AAFL;AAHH;AAvBF;AADO,CAAhB;;AAmCA,IAAMG,UAAUC,OAAOC,GAAP,CAAW,eAAX,CAAhB;AACA,IAAMC,YAAYF,OAAOC,GAAP,CAAW,iBAAX,CAAlB;;AAEA,SAASE,QAAT,CAAmBC,GAAnB,EAAwB;AACtB,MAAMC,YAAY,IAAIC,GAAJ,EAAlB;AACA,MAAMC,UAAUrC,eAAekC,GAAf,EAAoBC,SAApB,CAAhB;AACA,MAAMG,WAAWrC,gBAAgBiC,GAAhB,EAAqBG,OAArB,CAAjB;;AAEAH,MAAIK,aAAJ,CAAkB,IAAlB,EAAwBF,QAAQG,GAAhC,EAAqCH,QAAQI,WAA7C;AACAP,MAAIK,aAAJ,CAAkB,IAAlB,EAAwBD,SAASE,GAAjC,EAAsCF,SAASG,WAA/C;;AAEAN,YAAUO,GAAV,CAAcL,QAAQG,GAAtB,EAA2BE,GAA3B,CAA+BJ,SAASE,GAAxC;;AAEA,SAAO,iBAAS;AACd,QAAInB,MAAMsB,QAAN,KAAmBd,OAAvB,EAAgC,OAAOQ,QAAQO,QAAf;AAChC,QAAIvB,MAAMsB,QAAN,KAAmBX,SAAvB,EAAkC,OAAOM,SAASM,QAAhB;AAClC,WAAO,IAAP;AACD,GAJD;AAKD;AACD1C,QAAQ+B,QAAR,GAAmBA,QAAnB","file":"index.js","sourcesContent":["'use strict'\n\nconst pkg = require('./package.json')\nconst elementFactory = require('./lib/elementFactory')\nconst testJsonFactory = require('./lib/testJsonFactory')\n\n// Must be unique across all registered plugins.\nexports.name = pkg.name\n\n// Expected API version to be passed to register().\nexports.apiVersion = 1\n\n// Expected minimal version of Concordance. Concordance will increment its API\n// version for breaking changes, this is useful if you rely on features or\n// patches that were introduced in a specific version of Concordance.\nexports.minimalConcordanceVersion = '1.0.0'\n\n// Plugin-specific version of its serialization output.\nexports.serializerVersion = 1\n\nexports.theme = {\n  react: {\n    functionType: '\\u235F',\n    openTag: {\n      start: '<',\n      end: '>',\n      selfClose: '/',\n      selfCloseVoid: ' /'\n    },\n    closeTag: {\n      open: '</',\n      close: '>'\n    },\n    tagName: {open: '', close: ''},\n    attribute: {\n      separator: '=',\n      value: {\n        openBracket: '{',\n        closeBracket: '}',\n        string: {\n          line: {open: '\"', close: '\"', escapeQuote: '\"'}\n        }\n      }\n    },\n    child: {\n      openBracket: '{',\n      closeBracket: '}',\n      string: {\n        line: {open: '', close: '', escapeQuote: ''},\n        multiline: {start: '', end: '', escapeQuote: ''}\n      }\n    }\n  }\n}\n\nconst ELEMENT = Symbol.for('react.element')\nconst TEST_JSON = Symbol.for('react.test.json')\n\nfunction register (api) {\n  const reactTags = new Set()\n  const element = elementFactory(api, reactTags)\n  const testJson = testJsonFactory(api, element)\n\n  api.addDescriptor(0x01, element.tag, element.deserialize)\n  api.addDescriptor(0x02, testJson.tag, testJson.deserialize)\n\n  reactTags.add(element.tag).add(testJson.tag)\n\n  return value => {\n    if (value.$$typeof === ELEMENT) return element.describe\n    if (value.$$typeof === TEST_JSON) return testJson.describe\n    return null\n  }\n}\nexports.register = register\n"]}