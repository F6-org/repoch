{"version":3,"sources":["../../../../../src/node_modules/@concordance/react/lib/testJsonFactory.js"],"names":["arrify","require","factory","api","element","tag","Symbol","describe","props","obj","value","name","type","children","properties","hasProperties","Object","keys","length","DescribedTestJsonValue","hasTypeFn","typeFn","isList","deserialize","state","recursor","DeserializedTestJsonValue","TestJsonValue","expected","SHALLOW_EQUAL","UNEQUAL","compareResult","ElementValue","defineProperty","prototype","DescribedMixin","DeserializedMixin","module","exports"],"mappings":"AAAA;;;;;;;;;;;;AAEA,IAAMA,SAASC,QAAQ,QAAR,CAAf;;AAEA,SAASC,OAAT,CAAkBC,GAAlB,EAAuBC,OAAvB,EAAgC;AAC9B,MAAMC,MAAMC,OAAO,kCAAP,CAAZ;;AAEA,WAASC,QAAT,CAAmBC,KAAnB,EAA0B;AACxB,QAAMC,MAAMD,MAAME,KAAlB;;AAEA,QAAMC,OAAOF,IAAIG,IAAjB;AACA,QAAMC,WAAWb,OAAOS,IAAII,QAAX,CAAjB;AACA,QAAMC,aAAa,SAAc,EAAd,EAAkBL,IAAID,KAAtB,CAAnB;AACA,QAAMO,gBAAgBC,OAAOC,IAAP,CAAYH,UAAZ,EAAwBI,MAAxB,GAAiC,CAAvD;;AAEA,WAAO,IAAIC,sBAAJ,CAA2B,SAAc;AAC9CN,wBAD8C;AAE9CE,kCAF8C;AAG9CK,iBAAW,KAHmC;AAI9CT,gBAJ8C;AAK9CG,4BAL8C;AAM9CO,cAAQ,IANsC;AAO9CC,cAAQT,SAASK,MAAT,GAAkB;AAPoB,KAAd,EAQ/BV,KAR+B,CAA3B,CAAP;AASD;;AAED,WAASe,WAAT,CAAsBC,KAAtB,EAA6BC,QAA7B,EAAuC;AACrC,WAAO,IAAIC,yBAAJ,CAA8BF,KAA9B,EAAqCC,QAArC,CAAP;AACD;;AAxB6B,MA0BxBE,aA1BwB;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,8BA2BnBC,QA3BmB,EA2BT;AACjB;AACA,eAAO,CAAC,KAAKvB,GAAL,KAAauB,SAASvB,GAAtB,IAA6BuB,SAASvB,GAAT,KAAiBD,QAAQC,GAAvD,KAA+D,KAAKM,IAAL,KAAciB,SAASjB,IAAtF,GACHR,IAAI0B,aADD,GAEH1B,IAAI2B,OAFR;AAGD;AAhC2B;AAAA;AAAA,kCAkCfF,QAlCe,EAkCL;AACrB,eAAO;AACL;AACAG,yBAAe,KAAK1B,GAAL,KAAauB,SAASvB,GAAtB,IAA6BuB,SAASvB,GAAT,KAAiBD,QAAQC,GAAtD,GACXF,IAAI0B,aADO,GAEX1B,IAAI2B;AAJH,SAAP;AAMD;AAzC2B;;AAAA;AAAA,IA0BF1B,QAAQ4B,YA1BN;;AA2C9BhB,SAAOiB,cAAP,CAAsBN,cAAcO,SAApC,EAA+C,KAA/C,EAAsD,EAACxB,OAAOL,GAAR,EAAtD;;AAEA,MAAMc,yBAAyBf,QAAQ+B,cAAR,CAAuBR,aAAvB,CAA/B;AACA,MAAMD,4BAA4BtB,QAAQgC,iBAAR,CAA0BT,aAA1B,CAAlC;;AAEA,SAAO;AACLpB,sBADK;AAELgB,4BAFK;AAGLlB;AAHK,GAAP;AAKD;AACDgC,OAAOC,OAAP,GAAiBpC,OAAjB","file":"testJsonFactory.js","sourcesContent":["'use strict'\n\nconst arrify = require('arrify')\n\nfunction factory (api, element) {\n  const tag = Symbol('@concordance/react.TestJsonValue')\n\n  function describe (props) {\n    const obj = props.value\n\n    const name = obj.type\n    const children = arrify(obj.children)\n    const properties = Object.assign({}, obj.props)\n    const hasProperties = Object.keys(properties).length > 0\n\n    return new DescribedTestJsonValue(Object.assign({\n      children,\n      hasProperties,\n      hasTypeFn: false,\n      name,\n      properties,\n      typeFn: null,\n      isList: children.length > 0\n    }, props))\n  }\n\n  function deserialize (state, recursor) {\n    return new DeserializedTestJsonValue(state, recursor)\n  }\n\n  class TestJsonValue extends element.ElementValue {\n    compare (expected) {\n      // Allow expected value to be a React element.\n      return (this.tag === expected.tag || expected.tag === element.tag) && this.name === expected.name\n        ? api.SHALLOW_EQUAL\n        : api.UNEQUAL\n    }\n\n    prepareDiff (expected) {\n      return {\n        // Allow expected value to be a React element.\n        compareResult: this.tag === expected.tag || expected.tag === element.tag\n          ? api.SHALLOW_EQUAL\n          : api.UNEQUAL\n      }\n    }\n  }\n  Object.defineProperty(TestJsonValue.prototype, 'tag', {value: tag})\n\n  const DescribedTestJsonValue = element.DescribedMixin(TestJsonValue)\n  const DeserializedTestJsonValue = element.DeserializedMixin(TestJsonValue)\n\n  return {\n    describe,\n    deserialize,\n    tag\n  }\n}\nmodule.exports = factory\n"]}