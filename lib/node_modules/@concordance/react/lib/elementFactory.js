'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var arrify = require('arrify');
var _diffShallow = require('./diffShallow');
var escapeText = require('./escapeText');

function factory(api, reactTags) {
  var tag = Symbol('@concordance/react.ElementValue');

  function customPropertyFormatter(theme, indent, key, value) {
    var separator = theme.react.attribute.separator + theme.react.attribute.value.openBracket;
    if (value.isSingle) {
      return value.withFirstPrefixed(key.formatAsKey(theme) + separator).withLastPostfixed(theme.react.attribute.value.closeBracket);
    }

    return api.lineBuilder.first(key.formatAsKey(theme) + separator).concat(value.withFirstPrefixed(indent.increase()).stripFlags()).append(api.lineBuilder.last(indent + theme.react.attribute.value.closeBracket));
  }

  function themeProperty(theme) {
    theme.property.increaseValueIndent = true;
    theme.property.customFormat = customPropertyFormatter;
  }

  function themeStringProperty(theme) {
    theme.property.separator = theme.react.attribute.separator;
    theme.property.after = '';
    _extends(theme.string.line, theme.react.attribute.value.string.line);
  }

  function customItemFormatter(theme, indent, value) {
    if (value.isSingle) {
      return value.withFirstPrefixed(theme.react.child.openBracket).withLastPostfixed(theme.react.child.closeBracket);
    }

    return api.lineBuilder.first(theme.react.child.openBracket).concat(value.withFirstPrefixed(indent.increase()).stripFlags()).append(api.lineBuilder.last(indent + theme.react.child.closeBracket));
  }

  function themeChild(theme) {
    theme.item.increaseValueIndent = true;
    theme.item.customFormat = customItemFormatter;
  }

  function themeReactChild(theme) {
    theme.item.after = '';
  }

  function themeStringChild(theme) {
    theme.item.after = '';
    _extends(theme.string, theme.react.child.string);
  }

  function describe(props) {
    var element = props.value;

    var type = element.type;
    var hasTypeFn = typeof type === 'function';
    var typeFn = hasTypeFn ? type : null;
    var name = hasTypeFn ? type.displayName || type.name : type;

    var children = arrify(element.props.children);

    var properties = _extends({}, element.props);
    delete properties.children;
    if (element.key !== null) {
      properties.key = element.key;
    }
    var hasProperties = Object.keys(properties).length > 0;

    return new DescribedElementValue(_extends({
      children: children,
      hasProperties: hasProperties,
      hasTypeFn: hasTypeFn,
      name: name,
      properties: properties,
      typeFn: typeFn,
      isList: children.length > 0
    }, props));
  }

  function deserialize(state, recursor) {
    return new DeserializedElementValue(state, recursor);
  }

  var ElementValue = function (_api$ObjectValue) {
    _inherits(ElementValue, _api$ObjectValue);

    function ElementValue(props) {
      _classCallCheck(this, ElementValue);

      var _this = _possibleConstructorReturn(this, (ElementValue.__proto__ || Object.getPrototypeOf(ElementValue)).call(this, props));

      _this.name = props.name;
      _this.hasProperties = props.hasProperties;
      _this.hasTypeFn = props.hasTypeFn;

      _this.hasChildren = _this.isList;
      return _this;
    }

    _createClass(ElementValue, [{
      key: 'compare',
      value: function compare(expected) {
        return this.tag === expected.tag && this.name === expected.name ? api.SHALLOW_EQUAL : api.UNEQUAL;
      }
    }, {
      key: 'formatName',
      value: function formatName(theme) {
        var formatted = api.wrapFromTheme(theme.react.tagName, this.name);
        return this.hasTypeFn ? formatted + theme.react.functionType : formatted;
      }
    }, {
      key: 'compareNames',
      value: function compareNames(expected) {
        return this.name === expected.name && this.hasTypeFn === expected.hasTypeFn;
      }
    }, {
      key: 'formatShallow',
      value: function formatShallow(theme, indent) {
        var _this2 = this;

        var childBuffer = api.lineBuilder.buffer();
        var propertyBuffer = api.lineBuilder.buffer();

        return {
          append: function append(formatted, origin) {
            if (origin.isItem === true) {
              childBuffer.append(formatted);
            } else {
              propertyBuffer.append(formatted);
            }
          },


          finalize: function finalize() {
            var name = _this2.formatName(theme);
            var openTag = theme.react.openTag;

            if (!_this2.hasChildren && !_this2.hasProperties) {
              return api.lineBuilder.single(openTag.start + name + openTag.selfCloseVoid + openTag.end);
            }

            var innerIndentation = indent.increase();
            var children = childBuffer.withFirstPrefixed(innerIndentation).stripFlags();
            var properties = propertyBuffer.withFirstPrefixed(innerIndentation).stripFlags();

            var result = api.lineBuilder.buffer();
            if (_this2.hasProperties) {
              result.append(api.lineBuilder.first(openTag.start + name)).append(properties);

              if (_this2.hasChildren) {
                result.append(api.lineBuilder.line(indent + openTag.end));
              } else {
                result.append(api.lineBuilder.last(indent + openTag.selfClose + openTag.end));
              }
            } else {
              result.append(api.lineBuilder.first(openTag.start + name + openTag.end));
            }

            if (_this2.hasChildren) {
              result.append(children).append(api.lineBuilder.last(indent + api.wrapFromTheme(theme.react.closeTag, name)));
            }

            return result;
          },

          maxDepth: function maxDepth() {
            var name = _this2.formatName(theme);
            var openTag = theme.react.openTag;

            if (!_this2.hasChildren && !_this2.hasProperties) {
              return api.lineBuilder.single(openTag.start + name + openTag.selfCloseVoid + openTag.end);
            }

            var str = openTag.start + name;
            if (_this2.hasProperties) {
              str += theme.maxDepth;
              if (_this2.hasChildren) {
                str += openTag.end;
              } else {
                str += ' ' + openTag.selfClose + openTag.end;
              }
            } else {
              str += openTag.end;
            }

            if (_this2.hasChildren) {
              str += theme.maxDepth + api.wrapFromTheme(theme.react.closeTag, name);
            }

            return api.lineBuilder.single(str);
          },

          shouldFormat: function shouldFormat(subject) {
            return subject.isItem === true || subject.isProperty === true;
          },


          increaseIndent: true
        };
      }
    }, {
      key: 'prepareDiff',
      value: function prepareDiff(expected) {
        return {
          compareResult: this.tag === expected.tag ? api.SHALLOW_EQUAL : api.UNEQUAL
        };
      }
    }, {
      key: 'diffShallow',
      value: function diffShallow(expected, theme, indent) {
        return _diffShallow(api, this, expected, theme, indent);
      }
    }, {
      key: 'serialize',
      value: function serialize() {
        return [this.name, this.hasProperties, this.hasTypeFn, _get(ElementValue.prototype.__proto__ || Object.getPrototypeOf(ElementValue.prototype), 'serialize', this).call(this)];
      }
    }]);

    return ElementValue;
  }(api.ObjectValue);

  Object.defineProperty(ElementValue.prototype, 'tag', { value: tag });

  function modifyThemes(recursor) {
    return api.mapRecursor(recursor, function (next) {
      var modifier = void 0;
      if (next.isItem === true) {
        if (next.tag === api.descriptorTags.primitiveItem && next.value.tag === api.descriptorTags.string) {
          modifier = themeStringChild;
        } else if (next.tag === api.descriptorTags.complexItem && reactTags.has(next.value.tag)) {
          modifier = themeReactChild;
        } else {
          modifier = themeChild;
        }
      } else if (next.isProperty === true) {
        if (next.tag === api.descriptorTags.primitiveProperty && next.value.tag === api.descriptorTags.string && !next.value.includesLinebreaks) {
          modifier = themeStringProperty;
        } else {
          modifier = themeProperty;
        }
      }

      return modifier ? api.modifyTheme(next, modifier) : next;
    });
  }

  function DescribedMixin(base) {
    return function (_api$DescribedMixin) {
      _inherits(_class, _api$DescribedMixin);

      function _class(props) {
        _classCallCheck(this, _class);

        var _this3 = _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).call(this, props));

        _this3.children = props.children;
        _this3.properties = props.properties;
        _this3.typeFn = props.typeFn;
        return _this3;
      }

      _createClass(_class, [{
        key: 'compare',
        value: function compare(expected) {
          var result = _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'compare', this).call(this, expected);
          return result === api.SHALLOW_EQUAL && this.typeFn !== expected.typeFn ? api.UNEQUAL : result;
        }
      }, {
        key: 'compareNames',
        value: function compareNames(expected) {
          return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'compareNames', this).call(this, expected) && this.typeFn === expected.typeFn;
        }
      }, {
        key: 'createPropertyRecursor',
        value: function createPropertyRecursor() {
          var _this4 = this;

          // Symbols are not valid property keys for React elements. This code
          // also assumes that the keys can be formatted as JSX-like attribute
          // names. Keys are not pre-escaped before being passed to Concordance's
          // property descriptor.
          var keys = Object.keys(this.properties).sort();
          var size = keys.length;

          var index = 0;
          var next = function next() {
            if (index === size) return null;

            var key = keys[index++];
            // Note that string values are not specifically escaped such that the
            // output is valid JSX.
            return _this4.describeProperty(key, _this4.describeAny(_this4.properties[key]));
          };

          return { size: size, next: next };
        }
      }, {
        key: 'createListRecursor',
        value: function createListRecursor() {
          var _this5 = this;

          if (!this.isList) return _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'createListRecursor', this).call(this);

          var size = this.children.length;

          var index = 0;
          var next = function next() {
            if (index === size) return null;

            var current = index++;
            var child = _this5.children[current];
            var type = typeof child === 'undefined' ? 'undefined' : _typeof(child);
            var descriptor = void 0;
            if (type === 'string') {
              descriptor = _this5.describeAny(escapeText(child));
            } else {
              descriptor = _this5.describeAny(child);
            }

            return _this5.describeItem(current, descriptor);
          };

          return { size: size, next: next };
        }
      }, {
        key: 'createRecursor',
        value: function createRecursor() {
          return modifyThemes(_get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'createRecursor', this).call(this));
        }
      }]);

      return _class;
    }(api.DescribedMixin(base));
  }

  function DeserializedMixin(base) {
    return function (_api$DeserializedMixi) {
      _inherits(_class2, _api$DeserializedMixi);

      function _class2(state, recursor) {
        _classCallCheck(this, _class2);

        var _this6 = _possibleConstructorReturn(this, (_class2.__proto__ || Object.getPrototypeOf(_class2)).call(this, state[3], recursor));

        _this6.name = state[0];
        _this6.hasProperties = state[1];
        _this6.hasTypeFn = state[2];
        return _this6;
      }

      _createClass(_class2, [{
        key: 'createRecursor',
        value: function createRecursor() {
          return modifyThemes(_get(_class2.prototype.__proto__ || Object.getPrototypeOf(_class2.prototype), 'createRecursor', this).call(this));
        }
      }]);

      return _class2;
    }(api.DeserializedMixin(base));
  }

  var DescribedElementValue = DescribedMixin(ElementValue);
  var DeserializedElementValue = DeserializedMixin(ElementValue);

  return {
    DescribedMixin: DescribedMixin,
    DeserializedMixin: DeserializedMixin,
    ElementValue: ElementValue,
    describe: describe,
    deserialize: deserialize,
    tag: tag
  };
}
module.exports = factory;
//# sourceMappingURL=elementFactory.js.map