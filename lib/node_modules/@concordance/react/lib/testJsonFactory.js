'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var arrify = require('arrify');

function factory(api, element) {
  var tag = Symbol('@concordance/react.TestJsonValue');

  function describe(props) {
    var obj = props.value;

    var name = obj.type;
    var children = arrify(obj.children);
    var properties = _extends({}, obj.props);
    var hasProperties = Object.keys(properties).length > 0;

    return new DescribedTestJsonValue(_extends({
      children: children,
      hasProperties: hasProperties,
      hasTypeFn: false,
      name: name,
      properties: properties,
      typeFn: null,
      isList: children.length > 0
    }, props));
  }

  function deserialize(state, recursor) {
    return new DeserializedTestJsonValue(state, recursor);
  }

  var TestJsonValue = function (_element$ElementValue) {
    _inherits(TestJsonValue, _element$ElementValue);

    function TestJsonValue() {
      _classCallCheck(this, TestJsonValue);

      return _possibleConstructorReturn(this, (TestJsonValue.__proto__ || Object.getPrototypeOf(TestJsonValue)).apply(this, arguments));
    }

    _createClass(TestJsonValue, [{
      key: 'compare',
      value: function compare(expected) {
        // Allow expected value to be a React element.
        return (this.tag === expected.tag || expected.tag === element.tag) && this.name === expected.name ? api.SHALLOW_EQUAL : api.UNEQUAL;
      }
    }, {
      key: 'prepareDiff',
      value: function prepareDiff(expected) {
        return {
          // Allow expected value to be a React element.
          compareResult: this.tag === expected.tag || expected.tag === element.tag ? api.SHALLOW_EQUAL : api.UNEQUAL
        };
      }
    }]);

    return TestJsonValue;
  }(element.ElementValue);

  Object.defineProperty(TestJsonValue.prototype, 'tag', { value: tag });

  var DescribedTestJsonValue = element.DescribedMixin(TestJsonValue);
  var DeserializedTestJsonValue = element.DeserializedMixin(TestJsonValue);

  return {
    describe: describe,
    deserialize: deserialize,
    tag: tag
  };
}
module.exports = factory;
//# sourceMappingURL=testJsonFactory.js.map